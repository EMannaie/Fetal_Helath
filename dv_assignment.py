# -*- coding: utf-8 -*-
"""DV Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z1EPj90GVfhrzcxzIqGQR1MH-mZVVpwc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from statsmodels.stats.outliers_influence import variance_inflation_factor
!pip install pycaret
from pycaret  import regression
from sklearn.model_selection import cross_val_score

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/fetal_health.csv')

df.head()

df.tail()

df.shape

df.info()

df.dtypes

df.describe()

df.describe().T

# get list of categorical columns
cat_cols = df.select_dtypes(include=['object']).columns.tolist()
cat_cols

df.isnull().any()

df.dtypes

df.corr()
# Set the size of figure to 12 by 10.
plt.figure(figsize=(20,10))

# Seaborn has very simple solution for heatmap
p=sns.heatmap(df.corr(), annot=True)

df.columns

df.hist(figsize=(20, 25), bins=15, color='skyblue', edgecolor='black')

plt.suptitle('Histograms for All Columns', fontsize=16)
plt.tight_layout()
plt.subplots_adjust(top=0.95)

plt.show()

df.drop(['histogram_median', 'histogram_mode', 'severe_decelerations', 'histogram_number_of_zeroes', 'fetal_movement'], axis = 1, inplace = True)

# Count the number of instances in each class
class_counts = df['fetal_health'].value_counts()

# Print the class distribution
print('Class distribution:')
print(class_counts)

X = df.drop('fetal_health', axis = 1)
y = df['fetal_health']

from sklearn.model_selection import train_test_split

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from imblearn.over_sampling import SMOTE

# Instantiate SMOTE
sm = SMOTE(random_state=42)

# Fit SMOTE to training data
X_train_res, y_train_res = sm.fit_resample(X_train, y_train)

# Print class distribution of original and resampled data
print('Class distribution before resampling:', y_train.value_counts())
print('Class distribution after resampling:', y_train_res.value_counts())

# Count the number of instances in each class
class_counts = df['fetal_health'].value_counts()

# Create a list of labels
labels = ["Normal", "Suspect", "Pathological"]

# Create a list of values
values = class_counts.values

# Plot the pie chart
plt.pie(values, labels=labels, autopct="%1.0f%%")

# Add a title
plt.title("Fetal Health Distribution")

# Show the plot
plt.show()

sns.pairplot(df)

def plots(df, variable):
  if df[variable].dtype != object:
    # define figure size
    fig, ax = plt.subplots(1, 5, figsize=(24, 4))

    # histogram
    sns.histplot(df[variable], bins=30, kde=True, ax=ax[0])
    ax[0].set_title('Histogram')

    # KDE plot
    sns.kdeplot(df[variable], ax=ax[1])
    ax[1].set_title('KDE Plot')

    # Line plot
    sns.lineplot(df[variable], ax=ax[2])
    ax[2].set_title('Line Plot')

    # boxplot
    sns.boxplot(y=df[variable], ax=ax[3])
    ax[3].set_title('Boxplot')

    # scatterplot
    sns.scatterplot(x=df.index, y=df[variable], ax=ax[4])
    ax[4].set_title('Scatterplot')

    plt.tight_layout()
    plt.show()

for i in df.columns:
    plots(df ,i)

# combine X_train_res and y_train_res
train_data = pd.concat([X_train_res, y_train_res], axis=1)

from pycaret.classification import *
s = setup(data=train_data, target='fetal_health', session_id=123, normalize=True)

s.data.head()

lgbm = create_model('lightgbm')

lgbm

# Evaluate the ensemble model using cross-validation
scores = cross_val_score(lgbm, X_train_res, y_train_res, cv=20)

scores

preds = predict_model(lgbm)

preds

import lightgbm as lgb

# Create a LightGBM classifier
clf = lgb.LGBMClassifier()

# Train the classifier
clf.fit(X_train_res, y_train_res)

score = cross_val_score(clf, X_train_res, y_train_res, cv = 20)

score

y_pred = clf.predict(X_test)

plot_model(lgbm)

plot_model(lgbm, plot = 'error')

plot_model(lgbm, plot = 'learning')

plot_model(lgbm, plot = 'vc')

from sklearn.metrics import classification_report, confusion_matrix

y_test.shape

y_pred.shape

print("Classification Report")
print(classification_report(y_test, y_pred))

print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

ax= plt.subplot()
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, ax = ax);

# labels, title and ticks
ax.set_xlabel("Predicted labels");
ax.set_ylabel("True labels");
ax.set_title("Confusion Matrix");
ax.xaxis.set_ticklabels(["Normal", "Suspect", "Pathological"]);